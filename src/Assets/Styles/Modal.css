.Modal-Container {
    background-color: white;
    border: 2px solid var(--cBlueDark);
    border-radius: 5px;
    padding: 20px;
    display: flex;
    flex-direction: column;
    gap: 10px;
    max-height: 100%;
    overflow-y: auto;
}

.Modal-Heading {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.Modal-Container>h2 {
    color: var(--cBlueDark);
    margin-bottom: 10px;
}

.Modal-SubHeading-Info {
    color: var(--cMidGray);
}

.Modal-SubHeading-NoSpace {
    margin: 0;
}

.Modal-SubHeading-Container-NoSpace>p {
    margin: 0;
}

/* The following is used for input type text containers */
.Modal-InputContainer {
    display: grid;
    grid-template-columns: 2fr 60%;
    grid-gap: 10px;
    margin-bottom: 5px;
}

@media only screen and (min-width: 800px) {
    .Modal-InputContainer {
        min-width: 400px;
    }
}

.Modal-InputField-invalid {
    border: none;
    border: 2px solid var(--cRed);
    background: var(--cRedBackground);
}

/* The following is used for group (div) of paragraphs with less space between each other: */
.Modal-InformationGroupingDiv>p {
    margin-top: 0;
    margin-bottom: 0;
}

.Modal-InformationGroupingDiv-Pgray {
    color: var(--cMidGray);
}

/* The following is to be used on divs containing input radio button + label */
.Modal-RadioBtnContainer>input {
    margin-right: 5px;
}

.Modal-SpanExample {
    color: var(--cMidGray);
    font-style: italic;
}

/* The following is to be used on divs containing checkboxes */
.Modal-CheckboxContainer>input[type='checkbox'] {
    margin-right: 5px;
}

/* The following can be used in div containing inputs that have a dropdown effect (its display is a product of the choice of another input) */
.Modal-DropdownContainerForFurtherInput {
    margin-left: 15px;
    padding-left: 5px;
    border-left: 2px solid var(--cMidGray);
}

.Modal-Modal-DropdownContainerForFurtherInput-SubDiv {
    display: flex;
    gap: 10px;
}

.Modal-Modal-DropdownContainerForFurtherInput-SubDiv>* {
    margin: 3px 0 !important;
}

@media only screen and (min-width: 800px) {
    .Modal-Modal-DropdownContainerForFurtherInput-SubDiv {
        gap: 15px;
    }
}

/* if label and input elements are used: */
.Modal-InputContainer-Dropdown {
    display: grid;
    grid-template-columns: 2fr 63%;
    grid-gap: 10px;
    margin-bottom: 5px;
}

/* @media only screen and (min-width: 800px) {
    .Modal-InputContainer-Dropdown {
        min-width: 300px;
    }
} */

/* Input type=color -- Colour Picker */
.Modal-InputColorPicker {
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    background-color: transparent;
    width: 30px;
    height: 30px;
    border: none;
    cursor: pointer;
}

.Modal-InputColorPicker::-webkit-color-swatch {
    border-radius: 5px;
    border: none;
}

.Modal-InputColorPicker::-moz-color-swatch {
    border-radius: 5px;
    border: none;
}

/* Buttons and Icons */

.Modal-CloseModalIcon {
    width: 20px;
    align-self: flex-end;
    cursor: pointer;
    display: inline-block;
    filter: invert(14%) sepia(33%) saturate(388%) hue-rotate(152deg) brightness(94%) contrast(91%);
}

.Modal-PrimaryBtn {
    margin-top: 10px;
    cursor: pointer;
    font-weight: bold;
    border: 2px solid var(--cOrange);
    background-color: var(--cOrange);
    border-radius: 5px;
}

.Modal-DangerBtn {
    border: 2px solid var(--cRed);
    background-color: var(--cRed);
    color: var(--cRedLight);
}

.Modal-PrimaryBtn:disabled {
    cursor: not-allowed;
    background: #ccc;
    border-color: #ccc;
    color: var(--cGray);
}

@media (hover: hover) {
    .Modal-PrimaryBtn:hover {
        border-color: var(--cOrangeDarker);
        box-shadow: var(--cBoxShadowOrangeBtn);
    }

    .Modal-DangerBtn:hover {
        border-color: var(--cRed);
        box-shadow: var(--cBoxShadowRedBtn);
    }

    .Modal-CloseModalIcon:hover {
        filter: invert(53%) sepia(100%) saturate(352%) hue-rotate(357deg) brightness(92%) contrast(87%);
    }
}

/* Multi-select: component from react-select */
/* In order to style the react-select Select component,
add menuIsOpen= {true} to it, so it does not close while inspecting*/
.Modal-MultiSelect-Select__control {
    border: 1px solid var(--cMidGray) !important;
    border-radius: 3px !important;
}

.Modal-MultiSelect-Select__indicator-separator {
    display: none !important;
}

.Modal-MultiSelect-Select__indicator {
    padding: 0 2px !important;
}

.Modal-MultiSelect-Select__indicator>svg {
    height: 14px !important;
    width: 14px !important;
    color: black !important;
}

.Modal-MultiSelect-Select__option,
.Modal-MultiSelect-Select__multi-value__label {
    display: inline-flex !important;
    justify-items: center !important;
}

.Modal-MultiSelect-Select__multi-value {
    background-color: var(--cSuperLightGray) !important;
}

/* ModalAddExpense */
.modalAddExpenseHidden {
    display: none;
}